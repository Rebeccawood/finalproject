#!/usr/bin/env node

const http = require("http");

let app = require("../app");

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render("not-found");
});

app.use((err, req, res, next) => {
  // always log the error
  console.error("ERROR", req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render("error");
  }
});

let server = http.createServer(app);

server.on("error", error => {
  if (error.syscall !== "listen") {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

// -------------------- SOCKET ---------------------- //

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});

const io = require("socket.io").listen(server);

let userList = [];

io.on("connection", socket => {
  console.log("socket connected");
  socket.on("newChat", roomName => {
    console.log(roomName, "this is the roomname join");
    socket.join(roomName);
  });

  socket.on("newMessage", chat => {
    console.log("newMessage!!!!!", chat.messages);
    io.sockets.in(chat.room).emit("recieveMessage", chat.messages);
    // socket.to(message.room).emit("newMessage", message[0].text);
  });

  socket.on("messageSent", message => {
    console.log(message.room, "this is the room == message???");
    // io.sockets
    //   .in(`${message[0].room}`)
    //   .emit("messageSent", { message: message[0].text });
    io.sockets.in(message.room).emit("messageSent", message.messages);
    // socket.to(message[0].room).emit("messageSent", message.text);
  });
});
